//
//  StorageTestView.swift
//  Lumin
//
//  Created by –ê–Ω–¥—Ä–µ–π –ü—Ä—É–¥–Ω–∏–∫–æ–≤ on 29.06.2025.
//

import SwiftUI
import PhotosUI

struct StorageTestView: View {
    @State private var selectedPhoto: PhotosPickerItem?
    @State private var uploadedImageURL: String?
    @State private var isUploading = false
    @State private var showAlert = false
    @State private var alertMessage = ""
    
    private let networkManager = NetworkManager.shared
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Text("–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    .font(.title2)
                    .fontWeight(.semibold)
                
                Button("–í—ã–π—Ç–∏") {
                    AuthManager.shared.signOut()
                }
                .buttonStyle(.borderedProminent)
                .tint(.red)
                
                // –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                VStack(spacing: 12) {
                    Text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                        .font(.headline)
                    
                    if let accessToken = UserDefaults.standard.string(forKey: "accessToken") {
                        Text("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: \(accessToken.prefix(20))...")
                            .font(.caption)
                            .foregroundColor(.green)
                    } else {
                        Text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            .font(.caption)
                            .foregroundColor(.red)
                    }
                    
                    Button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã") {
                        checkTokens()
                    }
                    .buttonStyle(.bordered)
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
                
                // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                VStack(spacing: 12) {
                    Text("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
                        .font(.headline)
                    
                    PhotosPicker(selection: $selectedPhoto, matching: .images) {
                        HStack {
                            Image(systemName: "photo")
                            Text("–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        }
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(8)
                    }
                    
                    if isUploading {
                        ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞...")
                    }
                    
                    if let uploadedImageURL = uploadedImageURL {
                        Text("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                            .foregroundColor(.green)
                        
                        AsyncImage(url: URL(string: uploadedImageURL)) { image in
                            image
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(height: 200)
                        } placeholder: {
                            ProgressView()
                        }
                    }
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                VStack(alignment: .leading, spacing: 8) {
                    Text("–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase:")
                        .font(.headline)
                    
                    Text("‚Ä¢ Storage bucket: 'outfit-images'")
                    Text("‚Ä¢ Public access: –≤–∫–ª—é—á–µ–Ω")
                    Text("‚Ä¢ File size limit: 5MB")
                    Text("‚Ä¢ Allowed MIME types: image/*")
                    Text("‚Ä¢ RLS policies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                }
                .font(.caption)
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
                
                Spacer()
            }
            .padding()
            .navigationTitle("–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏")
            .navigationBarTitleDisplayMode(.inline)
            .onChange(of: selectedPhoto) { newItem in
                Task {
                    await uploadImage(newItem)
                }
            }
            .alert("–û—à–∏–±–∫–∞", isPresented: $showAlert) {
                Button("OK") { }
            } message: {
                Text(alertMessage)
            }
        }
    }
    
    private func uploadImage(_ item: PhotosPickerItem?) async {
        guard let item = item else { return }
        
        await MainActor.run {
            isUploading = true
            uploadedImageURL = nil
        }
        
        do {
            guard let imageData = try await item.loadTransferable(type: Data.self) else {
                throw NetworkError.uploadFailed
            }
            
            let fileName = "test_\(Date().timeIntervalSince1970).jpg"
            let url = try await networkManager.uploadImage(imageData, fileName: fileName)
            
            await MainActor.run {
                uploadedImageURL = url
                isUploading = false
            }
            
        } catch {
            await MainActor.run {
                isUploading = false
                alertMessage = error.localizedDescription
                showAlert = true
            }
        }
    }
    
    private func checkTokens() {
        let accessToken = UserDefaults.standard.string(forKey: "accessToken")
        let refreshToken = UserDefaults.standard.string(forKey: "refreshToken")
        
        print("üîç Checking tokens...")
        print("üìù Access token: \(accessToken?.prefix(20) ?? "nil")...")
        print("üìù Refresh token: \(refreshToken?.prefix(20) ?? "nil")...")
    }
}

#Preview {
    StorageTestView()
} 