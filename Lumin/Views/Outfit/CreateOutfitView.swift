//
//  CreateOutfitView.swift
//  Lumin
//
//  Created by –ê–Ω–¥—Ä–µ–π –ü—Ä—É–¥–Ω–∏–∫–æ–≤ on 29.06.2025.
//

import SwiftUI
import PhotosUI

struct CreateOutfitView: View {
    @ObservedObject var profileViewModel: ProfileViewModel
    @EnvironmentObject var outfitViewModel: OutfitViewModel
    @Environment(\.dismiss) private var dismiss
    
    @State private var selectedSeason: Season = .summer
    @State private var selectedGender: Gender = .unisex
    @State private var selectedAgeGroup: AgeGroup = .young
    @State private var items: [FashionItem] = []
    @State private var selectedPhotos: [PhotosPickerItem] = []
    @State private var photoData: [Data] = []
    @State private var showingImagePicker = false
    @State private var showingCamera = false
    @State private var showingAddItem = false
    @State private var cameraImage: UIImage?
    @State private var isUploading = false
    @State private var uploadProgress: Double = 0.0
    @State private var showAlert = false
    @State private var alertMessage = ""
    
    private let networkManager = NetworkManager.shared
    
    var body: some View {
        NavigationView {
            Form {
                Section("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—Ä—è–¥–∞") {
                    PhotoUploadSection(
                        photoData: $photoData,
                        selectedPhotos: $selectedPhotos,
                        showingImagePicker: $showingImagePicker,
                        showingCamera: $showingCamera,
                        cameraImage: $cameraImage,
                        isUploading: isUploading,
                        uploadProgress: uploadProgress
                    )
                }
                
                OutfitInfoSection(
                    selectedSeason: $selectedSeason,
                    selectedGender: $selectedGender,
                    selectedAgeGroup: $selectedAgeGroup
                )
                
                OutfitItemsSection(
                    items: $items,
                    showingAddItem: $showingAddItem
                )
            }
            .navigationTitle("–°–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—è–¥")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–û—Ç–º–µ–Ω–∞") {
                        dismiss()
                    }
                    .disabled(isUploading)
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–°–æ–∑–¥–∞—Ç—å") {
                        Task {
                            await createOutfit()
                        }
                    }
                    .disabled(items.isEmpty || photoData.isEmpty || isUploading)
                }
            }
            .photosPicker(isPresented: $showingImagePicker, selection: $selectedPhotos, matching: .images)
            .onChange(of: selectedPhotos) { newItems in
                Task {
                    for item in newItems {
                        if photoData.count < 2,
                           let data = try? await item.loadTransferable(type: Data.self) {
                            // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            if let image = UIImage(data: data) {
                                print("üì∏ Original image size: \(data.count) bytes")
                                
                                // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
                                var compressionQuality: CGFloat = 0.3
                                var compressedData: Data?
                                
                                repeat {
                                    compressedData = image.jpegData(compressionQuality: compressionQuality)
                                    print("üì∏ Trying compression quality \(compressionQuality): \(compressedData?.count ?? 0) bytes")
                                    compressionQuality -= 0.1
                                } while (compressedData?.count ?? 0) > 1024 * 1024 && compressionQuality > 0.1 // –ú–∞–∫—Å–∏–º—É–º 1MB
                                
                                if let finalData = compressedData {
                                    print("üì∏ Final compressed image: \(finalData.count) bytes (quality: \(compressionQuality + 0.1))")
                                    await MainActor.run {
                                        photoData.append(finalData)
                                    }
                                } else {
                                    print("‚ùå Failed to compress image")
                                    await MainActor.run {
                                        photoData.append(data)
                                    }
                                }
                            } else {
                                print("‚ùå Failed to create UIImage from data")
                                await MainActor.run {
                                    photoData.append(data)
                                }
                            }
                        }
                    }
                    selectedPhotos.removeAll()
                }
            }
            .sheet(isPresented: $showingCamera) {
                ImagePicker(selectedImage: $cameraImage, sourceType: .camera)
            }
            .onChange(of: cameraImage) { newImage in
                if let image = newImage,
                   photoData.count < 2 {
                    // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã
                    var compressionQuality: CGFloat = 0.8
                    var compressedData: Data?
                    
                    repeat {
                        compressedData = image.jpegData(compressionQuality: compressionQuality)
                        compressionQuality -= 0.1
                    } while (compressedData?.count ?? 0) > SupabaseConfig.maxImageSize && compressionQuality > 0.1
                    
                    if let finalData = compressedData {
                        print("üì∏ Compressed camera image: \(finalData.count) bytes (quality: \(compressionQuality + 0.1))")
                        photoData.append(finalData)
                    } else {
                        photoData.append(image.jpegData(compressionQuality: 0.5) ?? Data())
                    }
                    cameraImage = nil
                }
            }
            .sheet(isPresented: $showingAddItem) {
                AddItemView { newItem in
                    items.append(newItem)
                }
            }
            .alert("–û—à–∏–±–∫–∞", isPresented: $showAlert) {
                Button("OK") { }
            } message: {
                Text(alertMessage)
            }
        }
    }
    
    private func deleteItems(offsets: IndexSet) {
        items.remove(atOffsets: offsets)
    }
    
    private func createOutfit() async {
        print("üöÄ Starting outfit creation...")
        print("üë§ Current user: \(profileViewModel.currentUser?.username ?? "nil")")
        print("üì∏ Photo count: \(photoData.count)")
        print("üëï Items count: \(items.count)")
        print("üîê Is authenticated: \(AuthManager.shared.isAuthenticated)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        guard AuthManager.shared.isAuthenticated else {
            await MainActor.run {
                alertMessage = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É."
                showAlert = true
            }
            return
        }
        
        guard !photoData.isEmpty else {
            await MainActor.run {
                alertMessage = "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
                showAlert = true
            }
            return
        }
        
        await MainActor.run {
            isUploading = true
            uploadProgress = 0.0
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ storage (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        // await networkManager.testStorageConnection()
        
        do {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            let uploadedURLs = try await networkManager.uploadMultipleImages(photoData)
            
            await MainActor.run {
                uploadProgress = 1.0
            }
            
            print("üì∏ Successfully uploaded \(uploadedURLs.count) images")
            
            // –°–æ–∑–¥–∞–µ–º –Ω–∞—Ä—è–¥
            let author = profileViewModel.currentUser?.username ?? AuthManager.shared.currentUser?.username ?? "@user"
            print("üë§ Creating outfit for user: \(author)")
            print("üîç ProfileViewModel user: \(profileViewModel.currentUser?.username ?? "nil")")
            print("üîç AuthManager user: \(AuthManager.shared.currentUser?.username ?? "nil")")
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –∏–∑ —Ç–æ–∫–µ–Ω–∞
            if AuthManager.shared.currentUser == nil {
                print("üîÑ Attempting to load user from token...")
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è
            }
            
            let newOutfit = OutfitCard(
                author: author,
                photos: uploadedURLs,
                items: items,
                season: selectedSeason,
                gender: selectedGender,
                ageGroup: selectedAgeGroup
            )
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try await networkManager.createOutfit(newOutfit)
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º createOutfit —Å–Ω–æ–≤–∞)
            await MainActor.run {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ outfitViewModel, –º–∏–Ω—É—è ProfileViewModel
                outfitViewModel.outfits.insert(newOutfit, at: 0)
                isUploading = false
                dismiss()
            }
            
        } catch {
            await MainActor.run {
                isUploading = false
                alertMessage = "–û—à–∏–±–∫–∞ HTTP: \(error.localizedDescription)"
                print("‚ùå Create outfit error: \(error)")
                showAlert = true
            }
        }
    }
}

#Preview {
    CreateOutfitView(profileViewModel: ProfileViewModel(outfitViewModel: OutfitViewModel()))
        .environmentObject(OutfitViewModel())
}
